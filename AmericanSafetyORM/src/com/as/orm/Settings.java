// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Dec 20 08:56:19 EET 2014
// generated file: do not modify
package com.as.orm;

import com.as.orm.dbobject.DbObject;
import com.as.orm.dbobject.ForeignKeyViolationException;
import com.as.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Settings extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer settingsId = null;
    private String name = null;
    private String value = null;

    public Settings(Connection connection) {
        super(connection, "settings", "settings_id");
        setColumnNames(new String[]{"settings_id", "name", "value"});
    }

    public Settings(Connection connection, Integer settingsId, String name, String value) {
        super(connection, "settings", "settings_id");
        setNew(settingsId.intValue() <= 0);
//        if (settingsId.intValue() != 0) {
            this.settingsId = settingsId;
//        }
        this.name = name;
        this.value = value;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Settings settings = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT settings_id,name,value FROM settings WHERE settings_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                settings = new Settings(getConnection());
                settings.setSettingsId(new Integer(rs.getInt(1)));
                settings.setName(rs.getString(2));
                settings.setValue(rs.getString(3));
                settings.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return settings;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO settings ("+(getSettingsId().intValue()!=0?"settings_id,":"")+"name,value) values("+(getSettingsId().intValue()!=0?"?,":"")+"?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getSettingsId().intValue()!=0) {
                 ps.setObject(++n, getSettingsId());
             }
             ps.setObject(++n, getName());
             ps.setObject(++n, getValue());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getSettingsId().intValue()==0) {
             stmt = "SELECT max(settings_id) FROM settings";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setSettingsId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE settings " +
                    "SET name = ?, value = ?" + 
                    " WHERE settings_id = " + getSettingsId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getName());
                ps.setObject(2, getValue());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM settings " +
                "WHERE settings_id = " + getSettingsId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setSettingsId(new Integer(-getSettingsId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getSettingsId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT settings_id,name,value FROM settings " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Settings(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Settings[] objects = new Settings[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Settings settings = (Settings) lst.get(i);
            objects[i] = settings;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT settings_id FROM settings " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getSettingsId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return settingsId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setSettingsId(id);
        setNew(prevIsNew);
    }

    public Integer getSettingsId() {
        return settingsId;
    }

    public void setSettingsId(Integer settingsId) throws ForeignKeyViolationException {
        setWasChanged(this.settingsId != null && this.settingsId != settingsId);
        this.settingsId = settingsId;
        setNew(settingsId.intValue() == 0);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.name != null && !this.name.equals(name));
        this.name = name;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.value != null && !this.value.equals(value));
        this.value = value;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[3];
        columnValues[0] = getSettingsId();
        columnValues[1] = getName();
        columnValues[2] = getValue();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setSettingsId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setSettingsId(null);
        }
        setName(flds[1]);
        setValue(flds[2]);
    }
}
