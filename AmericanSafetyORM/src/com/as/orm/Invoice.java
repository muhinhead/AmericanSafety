// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Oct 18 12:11:41 EEST 2014
// generated file: do not modify
package com.as.orm;

import com.as.orm.dbobject.DbObject;
import com.as.orm.dbobject.ForeignKeyViolationException;
import com.as.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Invoice extends DbObject implements IDocument {
    private static Triggers activeTriggers = null;
    private Integer invoiceId = null;
    private String location = null;
    private String contractor = null;
    private Integer customerId = null;
    private Integer contactId = null;
    private String rigTankEq = null;
    private Double discount = null;
    private Double taxProc = null;
    private Date dateIn = null;
    private Date dateOut = null;
    private Object signature = null;
    private Integer poTypeId = null;
    private String poNumber = null;
    private Timestamp updatedAt = null;
    private Timestamp createdAt = null;
    private Integer createdBy = null;

    public Invoice(Connection connection) {
        super(connection, "invoice", "invoice_id");
        setColumnNames(new String[]{"invoice_id", "location", "contractor", "customer_id", "contact_id", "rig_tank_eq", "discount", "tax_proc", "date_in", "date_out", "signature", "po_type_id", "po_number", "updated_at", "created_at", "created_by"});
    }

    public Invoice(Connection connection, Integer invoiceId, String location, String contractor, Integer customerId, Integer contactId, String rigTankEq, Double discount, Double taxProc, Date dateIn, Date dateOut, Object signature, Integer poTypeId, String poNumber, Timestamp updatedAt, Timestamp createdAt, Integer createdBy) {
        super(connection, "invoice", "invoice_id");
        setNew(invoiceId.intValue() <= 0);
//        if (invoiceId.intValue() != 0) {
            this.invoiceId = invoiceId;
//        }
        this.location = location;
        this.contractor = contractor;
        this.customerId = customerId;
        this.contactId = contactId;
        this.rigTankEq = rigTankEq;
        this.discount = discount;
        this.taxProc = taxProc;
        this.dateIn = dateIn;
        this.dateOut = dateOut;
        this.signature = signature;
        this.poTypeId = poTypeId;
        this.poNumber = poNumber;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Invoice invoice = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT invoice_id,location,contractor,customer_id,contact_id,rig_tank_eq,discount,tax_proc,date_in,date_out,signature,po_type_id,po_number,updated_at,created_at,created_by FROM invoice WHERE invoice_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                invoice = new Invoice(getConnection());
                invoice.setInvoiceId(new Integer(rs.getInt(1)));
                invoice.setLocation(rs.getString(2));
                invoice.setContractor(rs.getString(3));
                invoice.setCustomerId(new Integer(rs.getInt(4)));
                invoice.setContactId(new Integer(rs.getInt(5)));
                invoice.setRigTankEq(rs.getString(6));
                invoice.setDiscount(rs.getDouble(7));
                invoice.setTaxProc(rs.getDouble(8));
                invoice.setDateIn(rs.getDate(9));
                invoice.setDateOut(rs.getDate(10));
                invoice.setSignature(rs.getObject(11));
                invoice.setPoTypeId(new Integer(rs.getInt(12)));
                invoice.setPoNumber(rs.getString(13));
                invoice.setUpdatedAt(rs.getTimestamp(14));
                invoice.setCreatedAt(rs.getTimestamp(15));
                invoice.setCreatedBy(new Integer(rs.getInt(16)));
                invoice.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return invoice;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO invoice ("+(getInvoiceId().intValue()!=0?"invoice_id,":"")+"location,contractor,customer_id,contact_id,rig_tank_eq,discount,tax_proc,date_in,date_out,signature,po_type_id,po_number,updated_at,created_at,created_by) values("+(getInvoiceId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getInvoiceId().intValue()!=0) {
                 ps.setObject(++n, getInvoiceId());
             }
             ps.setObject(++n, getLocation());
             ps.setObject(++n, getContractor());
             ps.setObject(++n, getCustomerId());
             ps.setObject(++n, getContactId());
             ps.setObject(++n, getRigTankEq());
             ps.setObject(++n, getDiscount());
             ps.setObject(++n, getTaxProc());
             ps.setObject(++n, getDateIn());
             ps.setObject(++n, getDateOut());
             ps.setObject(++n, getSignature());
             ps.setObject(++n, getPoTypeId());
             ps.setObject(++n, getPoNumber());
             ps.setObject(++n, getUpdatedAt());
             ps.setObject(++n, getCreatedAt());
             ps.setObject(++n, getCreatedBy());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getInvoiceId().intValue()==0) {
             stmt = "SELECT max(invoice_id) FROM invoice";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setInvoiceId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE invoice " +
                    "SET location = ?, contractor = ?, customer_id = ?, contact_id = ?, rig_tank_eq = ?, discount = ?, tax_proc = ?, date_in = ?, date_out = ?, signature = ?, po_type_id = ?, po_number = ?, updated_at = ?, created_at = ?, created_by = ?" + 
                    " WHERE invoice_id = " + getInvoiceId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getLocation());
                ps.setObject(2, getContractor());
                ps.setObject(3, getCustomerId());
                ps.setObject(4, getContactId());
                ps.setObject(5, getRigTankEq());
                ps.setObject(6, getDiscount());
                ps.setObject(7, getTaxProc());
                ps.setObject(8, getDateIn());
                ps.setObject(9, getDateOut());
                ps.setObject(10, getSignature());
                ps.setObject(11, getPoTypeId());
                ps.setObject(12, getPoNumber());
                ps.setObject(13, getUpdatedAt());
                ps.setObject(14, getCreatedAt());
                ps.setObject(15, getCreatedBy());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Invoiceitem.exists(getConnection(),"invoice_id = " + getInvoiceId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: invoiceitem_invoice_fk");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM invoice " +
                "WHERE invoice_id = " + getInvoiceId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setInvoiceId(new Integer(-getInvoiceId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getInvoiceId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT invoice_id,location,contractor,customer_id,contact_id,rig_tank_eq,discount,tax_proc,date_in,date_out,signature,po_type_id,po_number,updated_at,created_at,created_by FROM invoice " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Invoice(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),new Integer(rs.getInt(4)),new Integer(rs.getInt(5)),rs.getString(6),rs.getDouble(7),rs.getDouble(8),rs.getDate(9),rs.getDate(10),rs.getObject(11),new Integer(rs.getInt(12)),rs.getString(13),rs.getTimestamp(14),rs.getTimestamp(15),new Integer(rs.getInt(16))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Invoice[] objects = new Invoice[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Invoice invoice = (Invoice) lst.get(i);
            objects[i] = invoice;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT invoice_id FROM invoice " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getInvoiceId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return invoiceId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setInvoiceId(id);
        setNew(prevIsNew);
    }

    public Integer getInvoiceId() {
        return invoiceId;
    }

    public void setInvoiceId(Integer invoiceId) throws ForeignKeyViolationException {
        setWasChanged(this.invoiceId != null && this.invoiceId != invoiceId);
        this.invoiceId = invoiceId;
        setNew(invoiceId.intValue() == 0);
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.location != null && !this.location.equals(location));
        this.location = location;
    }

    public String getContractor() {
        return contractor;
    }

    public void setContractor(String contractor) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.contractor != null && !this.contractor.equals(contractor));
        this.contractor = contractor;
    }

    public Integer getCustomerId() {
        return customerId;
    }

    public void setCustomerId(Integer customerId) throws SQLException, ForeignKeyViolationException {
        if (null != customerId)
            customerId = customerId == 0 ? null : customerId;
        if (customerId!=null && !Customer.exists(getConnection(),"customer_id = " + customerId)) {
            throw new ForeignKeyViolationException("Can't set customer_id, foreign key violation: invoice_customer_fk");
        }
        setWasChanged(this.customerId != null && !this.customerId.equals(customerId));
        this.customerId = customerId;
    }

    public Integer getContactId() {
        return contactId;
    }

    public void setContactId(Integer contactId) throws SQLException, ForeignKeyViolationException {
        if (null != contactId)
            contactId = contactId == 0 ? null : contactId;
        if (contactId!=null && !Contact.exists(getConnection(),"contact_id = " + contactId)) {
            throw new ForeignKeyViolationException("Can't set contact_id, foreign key violation: invoice_contact_fk");
        }
        setWasChanged(this.contactId != null && !this.contactId.equals(contactId));
        this.contactId = contactId;
    }

    public String getRigTankEq() {
        return rigTankEq;
    }

    public void setRigTankEq(String rigTankEq) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.rigTankEq != null && !this.rigTankEq.equals(rigTankEq));
        this.rigTankEq = rigTankEq;
    }

    public Double getDiscount() {
        return discount;
    }

    public void setDiscount(Double discount) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.discount != null && !this.discount.equals(discount));
        this.discount = discount;
    }

    public Double getTaxProc() {
        return taxProc;
    }

    public void setTaxProc(Double taxProc) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.taxProc != null && !this.taxProc.equals(taxProc));
        this.taxProc = taxProc;
    }

    public Date getDateIn() {
        return dateIn;
    }

    public void setDateIn(Date dateIn) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.dateIn != null && !this.dateIn.equals(dateIn));
        this.dateIn = dateIn;
    }

    public Date getDateOut() {
        return dateOut;
    }

    public void setDateOut(Date dateOut) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.dateOut != null && !this.dateOut.equals(dateOut));
        this.dateOut = dateOut;
    }

    public Object getSignature() {
        return signature;
    }

    public void setSignature(Object signature) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.signature != null && !this.signature.equals(signature));
        this.signature = signature;
    }

    public Integer getPoTypeId() {
        return poTypeId;
    }

    public void setPoTypeId(Integer poTypeId) throws SQLException, ForeignKeyViolationException {
        if (null != poTypeId)
            poTypeId = poTypeId == 0 ? null : poTypeId;
        setWasChanged(this.poTypeId != null && !this.poTypeId.equals(poTypeId));
        this.poTypeId = poTypeId;
    }

    public String getPoNumber() {
        return poNumber;
    }

    public void setPoNumber(String poNumber) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.poNumber != null && !this.poNumber.equals(poNumber));
        this.poNumber = poNumber;
    }

    public Timestamp getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.updatedAt != null && !this.updatedAt.equals(updatedAt));
        this.updatedAt = updatedAt;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.createdAt != null && !this.createdAt.equals(createdAt));
        this.createdAt = createdAt;
    }

    public Integer getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(Integer createdBy) throws SQLException, ForeignKeyViolationException {
        if (createdBy!=null && !User.exists(getConnection(),"user_id = " + createdBy)) {
            throw new ForeignKeyViolationException("Can't set created_by, foreign key violation: invoice_user_fk");
        }
        setWasChanged(this.createdBy != null && !this.createdBy.equals(createdBy));
        this.createdBy = createdBy;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[16];
        columnValues[0] = getInvoiceId();
        columnValues[1] = getLocation();
        columnValues[2] = getContractor();
        columnValues[3] = getCustomerId();
        columnValues[4] = getContactId();
        columnValues[5] = getRigTankEq();
        columnValues[6] = getDiscount();
        columnValues[7] = getTaxProc();
        columnValues[8] = getDateIn();
        columnValues[9] = getDateOut();
        columnValues[10] = getSignature();
        columnValues[11] = getPoTypeId();
        columnValues[12] = getPoNumber();
        columnValues[13] = getUpdatedAt();
        columnValues[14] = getCreatedAt();
        columnValues[15] = getCreatedBy();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setInvoiceId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setInvoiceId(null);
        }
        setLocation(flds[1]);
        setContractor(flds[2]);
        try {
            setCustomerId(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setCustomerId(null);
        }
        try {
            setContactId(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setContactId(null);
        }
        setRigTankEq(flds[5]);
        try {
            setDiscount(Double.parseDouble(flds[6]));
        } catch(NumberFormatException ne) {
            setDiscount(null);
        }
        try {
            setTaxProc(Double.parseDouble(flds[7]));
        } catch(NumberFormatException ne) {
            setTaxProc(null);
        }
        setDateIn(toDate(flds[8]));
        setDateOut(toDate(flds[9]));
        setSignature(flds[10]);
        try {
            setPoTypeId(Integer.parseInt(flds[11]));
        } catch(NumberFormatException ne) {
            setPoTypeId(null);
        }
        setPoNumber(flds[12]);
        setUpdatedAt(toTimeStamp(flds[13]));
        setCreatedAt(toTimeStamp(flds[14]));
        try {
            setCreatedBy(Integer.parseInt(flds[15]));
        } catch(NumberFormatException ne) {
            setCreatedBy(null);
        }
    }
}
