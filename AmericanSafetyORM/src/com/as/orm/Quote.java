// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sun Nov 16 09:23:03 EET 2014
// generated file: do not modify
package com.as.orm;

import com.as.orm.dbobject.DbObject;
import com.as.orm.dbobject.ForeignKeyViolationException;
import com.as.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Quote extends DbObject implements IDocument {
    private static Triggers activeTriggers = null;
    private Integer quoteId = null;
    private String location = null;
    private String contractor = null;
    private String rigTankEq = null;
    private Double discount = null;
    private Double taxProc = null;
    private String poNumber = null;
    private Date dateIn = null;
    private Object signature = null;
    private Timestamp updatedAt = null;
    private Timestamp createdAt = null;
    private Integer createdBy = null;
    private Integer poTypeId = null;
    private Integer contactId = null;
    private Integer customerId = null;
    private Integer taxId = null;
    private Integer stampsId = null;
    private Double subtotal = null;
    private String wellName = null;
    private String afeUww = null;
    private String cai = null;
    private String aprvrName = null;
    private String dateStr = null;

    public Quote(Connection connection) {
        super(connection, "quote", "quote_id");
        setColumnNames(new String[]{"quote_id", "location", "contractor", "rig_tank_eq", "discount", "tax_proc", "po_number", "date_in", "signature", "updated_at", "created_at", "created_by", "po_type_id", "contact_id", "customer_id", "tax_id", "stamps_id", "subtotal", "well_name", "afe_uww", "cai", "aprvr_name", "date_str"});
    }

    public Quote(Connection connection, Integer quoteId, String location, String contractor, String rigTankEq, Double discount, Double taxProc, String poNumber, Date dateIn, Object signature, Timestamp updatedAt, Timestamp createdAt, Integer createdBy, Integer poTypeId, Integer contactId, Integer customerId, Integer taxId, Integer stampsId, Double subtotal, String wellName, String afeUww, String cai, String aprvrName, String dateStr) {
        super(connection, "quote", "quote_id");
        setNew(quoteId.intValue() <= 0);
//        if (quoteId.intValue() != 0) {
            this.quoteId = quoteId;
//        }
        this.location = location;
        this.contractor = contractor;
        this.rigTankEq = rigTankEq;
        this.discount = discount;
        this.taxProc = taxProc;
        this.poNumber = poNumber;
        this.dateIn = dateIn;
        this.signature = signature;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.poTypeId = poTypeId;
        this.contactId = contactId;
        this.customerId = customerId;
        this.taxId = taxId;
        this.stampsId = stampsId;
        this.subtotal = subtotal;
        this.wellName = wellName;
        this.afeUww = afeUww;
        this.cai = cai;
        this.aprvrName = aprvrName;
        this.dateStr = dateStr;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Quote quote = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT quote_id,location,contractor,rig_tank_eq,discount,tax_proc,po_number,date_in,signature,updated_at,created_at,created_by,po_type_id,contact_id,customer_id,tax_id,stamps_id,subtotal,well_name,afe_uww,cai,aprvr_name,date_str FROM quote WHERE quote_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                quote = new Quote(getConnection());
                quote.setQuoteId(new Integer(rs.getInt(1)));
                quote.setLocation(rs.getString(2));
                quote.setContractor(rs.getString(3));
                quote.setRigTankEq(rs.getString(4));
                quote.setDiscount(rs.getDouble(5));
                quote.setTaxProc(rs.getDouble(6));
                quote.setPoNumber(rs.getString(7));
                quote.setDateIn(rs.getDate(8));
                quote.setSignature(rs.getObject(9));
                quote.setUpdatedAt(rs.getTimestamp(10));
                quote.setCreatedAt(rs.getTimestamp(11));
                quote.setCreatedBy(new Integer(rs.getInt(12)));
                quote.setPoTypeId(new Integer(rs.getInt(13)));
                quote.setContactId(new Integer(rs.getInt(14)));
                quote.setCustomerId(new Integer(rs.getInt(15)));
                quote.setTaxId(new Integer(rs.getInt(16)));
                quote.setStampsId(new Integer(rs.getInt(17)));
                quote.setSubtotal(rs.getDouble(18));
                quote.setWellName(rs.getString(19));
                quote.setAfeUww(rs.getString(20));
                quote.setCai(rs.getString(21));
                quote.setAprvrName(rs.getString(22));
                quote.setDateStr(rs.getString(23));
                quote.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return quote;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO quote ("+(getQuoteId().intValue()!=0?"quote_id,":"")+"location,contractor,rig_tank_eq,discount,tax_proc,po_number,date_in,signature,updated_at,created_at,created_by,po_type_id,contact_id,customer_id,tax_id,stamps_id,subtotal,well_name,afe_uww,cai,aprvr_name,date_str) values("+(getQuoteId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getQuoteId().intValue()!=0) {
                 ps.setObject(++n, getQuoteId());
             }
             ps.setObject(++n, getLocation());
             ps.setObject(++n, getContractor());
             ps.setObject(++n, getRigTankEq());
             ps.setObject(++n, getDiscount());
             ps.setObject(++n, getTaxProc());
             ps.setObject(++n, getPoNumber());
             ps.setObject(++n, getDateIn());
             ps.setObject(++n, getSignature());
             ps.setObject(++n, getUpdatedAt());
             ps.setObject(++n, getCreatedAt());
             ps.setObject(++n, getCreatedBy());
             ps.setObject(++n, getPoTypeId());
             ps.setObject(++n, getContactId());
             ps.setObject(++n, getCustomerId());
             ps.setObject(++n, getTaxId());
             ps.setObject(++n, getStampsId());
             ps.setObject(++n, getSubtotal());
             ps.setObject(++n, getWellName());
             ps.setObject(++n, getAfeUww());
             ps.setObject(++n, getCai());
             ps.setObject(++n, getAprvrName());
             ps.setObject(++n, getDateStr());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getQuoteId().intValue()==0) {
             stmt = "SELECT max(quote_id) FROM quote";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setQuoteId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE quote " +
                    "SET location = ?, contractor = ?, rig_tank_eq = ?, discount = ?, tax_proc = ?, po_number = ?, date_in = ?, signature = ?, updated_at = ?, created_at = ?, created_by = ?, po_type_id = ?, contact_id = ?, customer_id = ?, tax_id = ?, stamps_id = ?, subtotal = ?, well_name = ?, afe_uww = ?, cai = ?, aprvr_name = ?, date_str = ?" + 
                    " WHERE quote_id = " + getQuoteId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getLocation());
                ps.setObject(2, getContractor());
                ps.setObject(3, getRigTankEq());
                ps.setObject(4, getDiscount());
                ps.setObject(5, getTaxProc());
                ps.setObject(6, getPoNumber());
                ps.setObject(7, getDateIn());
                ps.setObject(8, getSignature());
                ps.setObject(9, getUpdatedAt());
                ps.setObject(10, getCreatedAt());
                ps.setObject(11, getCreatedBy());
                ps.setObject(12, getPoTypeId());
                ps.setObject(13, getContactId());
                ps.setObject(14, getCustomerId());
                ps.setObject(15, getTaxId());
                ps.setObject(16, getStampsId());
                ps.setObject(17, getSubtotal());
                ps.setObject(18, getWellName());
                ps.setObject(19, getAfeUww());
                ps.setObject(20, getCai());
                ps.setObject(21, getAprvrName());
                ps.setObject(22, getDateStr());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        {// delete cascade from quoteitem
            Quoteitem[] records = (Quoteitem[])Quoteitem.load(getConnection(),"quote_id = " + getQuoteId(),null);
            for (int i = 0; i<records.length; i++) {
                Quoteitem quoteitem = records[i];
                quoteitem.delete();
            }
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM quote " +
                "WHERE quote_id = " + getQuoteId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setQuoteId(new Integer(-getQuoteId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getQuoteId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT quote_id,location,contractor,rig_tank_eq,discount,tax_proc,po_number,date_in,signature,updated_at,created_at,created_by,po_type_id,contact_id,customer_id,tax_id,stamps_id,subtotal,well_name,afe_uww,cai,aprvr_name,date_str FROM quote " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Quote(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getDouble(5),rs.getDouble(6),rs.getString(7),rs.getDate(8),rs.getObject(9),rs.getTimestamp(10),rs.getTimestamp(11),new Integer(rs.getInt(12)),new Integer(rs.getInt(13)),new Integer(rs.getInt(14)),new Integer(rs.getInt(15)),new Integer(rs.getInt(16)),new Integer(rs.getInt(17)),rs.getDouble(18),rs.getString(19),rs.getString(20),rs.getString(21),rs.getString(22),rs.getString(23)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Quote[] objects = new Quote[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Quote quote = (Quote) lst.get(i);
            objects[i] = quote;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT quote_id FROM quote " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getQuoteId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return quoteId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setQuoteId(id);
        setNew(prevIsNew);
    }

    public Integer getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(Integer quoteId) throws ForeignKeyViolationException {
        setWasChanged(this.quoteId != null && this.quoteId != quoteId);
        this.quoteId = quoteId;
        setNew(quoteId.intValue() == 0);
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.location != null && !this.location.equals(location));
        this.location = location;
    }

    public String getContractor() {
        return contractor;
    }

    public void setContractor(String contractor) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.contractor != null && !this.contractor.equals(contractor));
        this.contractor = contractor;
    }

    public String getRigTankEq() {
        return rigTankEq;
    }

    public void setRigTankEq(String rigTankEq) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.rigTankEq != null && !this.rigTankEq.equals(rigTankEq));
        this.rigTankEq = rigTankEq;
    }

    public Double getDiscount() {
        return discount;
    }

    public void setDiscount(Double discount) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.discount != null && !this.discount.equals(discount));
        this.discount = discount;
    }

    public Double getTaxProc() {
        return taxProc;
    }

    public void setTaxProc(Double taxProc) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.taxProc != null && !this.taxProc.equals(taxProc));
        this.taxProc = taxProc;
    }

    public String getPoNumber() {
        return poNumber;
    }

    public void setPoNumber(String poNumber) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.poNumber != null && !this.poNumber.equals(poNumber));
        this.poNumber = poNumber;
    }

    public Date getDateIn() {
        return dateIn;
    }

    public void setDateIn(Date dateIn) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.dateIn != null && !this.dateIn.equals(dateIn));
        this.dateIn = dateIn;
    }

    public Object getSignature() {
        return signature;
    }

    public void setSignature(Object signature) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.signature != null && !this.signature.equals(signature));
        this.signature = signature;
    }

    public Timestamp getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.updatedAt != null && !this.updatedAt.equals(updatedAt));
        this.updatedAt = updatedAt;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.createdAt != null && !this.createdAt.equals(createdAt));
        this.createdAt = createdAt;
    }

    public Integer getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(Integer createdBy) throws SQLException, ForeignKeyViolationException {
        if (createdBy!=null && !User.exists(getConnection(),"user_id = " + createdBy)) {
            throw new ForeignKeyViolationException("Can't set created_by, foreign key violation: quote_user_fk");
        }
        setWasChanged(this.createdBy != null && !this.createdBy.equals(createdBy));
        this.createdBy = createdBy;
    }

    public Integer getPoTypeId() {
        return poTypeId;
    }

    public void setPoTypeId(Integer poTypeId) throws SQLException, ForeignKeyViolationException {
        if (null != poTypeId)
            poTypeId = poTypeId == 0 ? null : poTypeId;
        if (poTypeId!=null && !Po.exists(getConnection(),"po_id = " + poTypeId)) {
            throw new ForeignKeyViolationException("Can't set po_type_id, foreign key violation: quote_po_fk");
        }
        setWasChanged(this.poTypeId != null && !this.poTypeId.equals(poTypeId));
        this.poTypeId = poTypeId;
    }

    public Integer getContactId() {
        return contactId;
    }

    public void setContactId(Integer contactId) throws SQLException, ForeignKeyViolationException {
        if (null != contactId)
            contactId = contactId == 0 ? null : contactId;
        if (contactId!=null && !Contact.exists(getConnection(),"contact_id = " + contactId)) {
            throw new ForeignKeyViolationException("Can't set contact_id, foreign key violation: quote_contact_fk");
        }
        setWasChanged(this.contactId != null && !this.contactId.equals(contactId));
        this.contactId = contactId;
    }

    public Integer getCustomerId() {
        return customerId;
    }

    public void setCustomerId(Integer customerId) throws SQLException, ForeignKeyViolationException {
        if (null != customerId)
            customerId = customerId == 0 ? null : customerId;
        if (customerId!=null && !Customer.exists(getConnection(),"customer_id = " + customerId)) {
            throw new ForeignKeyViolationException("Can't set customer_id, foreign key violation: quote_customer_fk");
        }
        setWasChanged(this.customerId != null && !this.customerId.equals(customerId));
        this.customerId = customerId;
    }

    public Integer getTaxId() {
        return taxId;
    }

    public void setTaxId(Integer taxId) throws SQLException, ForeignKeyViolationException {
        if (null != taxId)
            taxId = taxId == 0 ? null : taxId;
        if (taxId!=null && !Tax.exists(getConnection(),"tax_id = " + taxId)) {
            throw new ForeignKeyViolationException("Can't set tax_id, foreign key violation: quote_tax_fk");
        }
        setWasChanged(this.taxId != null && !this.taxId.equals(taxId));
        this.taxId = taxId;
    }

    public Integer getStampsId() {
        return stampsId;
    }

    public void setStampsId(Integer stampsId) throws SQLException, ForeignKeyViolationException {
        if (null != stampsId)
            stampsId = stampsId == 0 ? null : stampsId;
        if (stampsId!=null && !Stamps.exists(getConnection(),"stamps_id = " + stampsId)) {
            throw new ForeignKeyViolationException("Can't set stamps_id, foreign key violation: quote_stamps_fk");
        }
        setWasChanged(this.stampsId != null && !this.stampsId.equals(stampsId));
        this.stampsId = stampsId;
    }

    public Double getSubtotal() {
        return subtotal;
    }

    public void setSubtotal(Double subtotal) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.subtotal != null && !this.subtotal.equals(subtotal));
        this.subtotal = subtotal;
    }

    public String getWellName() {
        return wellName;
    }

    public void setWellName(String wellName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.wellName != null && !this.wellName.equals(wellName));
        this.wellName = wellName;
    }

    public String getAfeUww() {
        return afeUww;
    }

    public void setAfeUww(String afeUww) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.afeUww != null && !this.afeUww.equals(afeUww));
        this.afeUww = afeUww;
    }

    public String getCai() {
        return cai;
    }

    public void setCai(String cai) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.cai != null && !this.cai.equals(cai));
        this.cai = cai;
    }

    public String getAprvrName() {
        return aprvrName;
    }

    public void setAprvrName(String aprvrName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.aprvrName != null && !this.aprvrName.equals(aprvrName));
        this.aprvrName = aprvrName;
    }

    public String getDateStr() {
        return dateStr;
    }

    public void setDateStr(String dateStr) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.dateStr != null && !this.dateStr.equals(dateStr));
        this.dateStr = dateStr;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[23];
        columnValues[0] = getQuoteId();
        columnValues[1] = getLocation();
        columnValues[2] = getContractor();
        columnValues[3] = getRigTankEq();
        columnValues[4] = getDiscount();
        columnValues[5] = getTaxProc();
        columnValues[6] = getPoNumber();
        columnValues[7] = getDateIn();
        columnValues[8] = getSignature();
        columnValues[9] = getUpdatedAt();
        columnValues[10] = getCreatedAt();
        columnValues[11] = getCreatedBy();
        columnValues[12] = getPoTypeId();
        columnValues[13] = getContactId();
        columnValues[14] = getCustomerId();
        columnValues[15] = getTaxId();
        columnValues[16] = getStampsId();
        columnValues[17] = getSubtotal();
        columnValues[18] = getWellName();
        columnValues[19] = getAfeUww();
        columnValues[20] = getCai();
        columnValues[21] = getAprvrName();
        columnValues[22] = getDateStr();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setQuoteId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setQuoteId(null);
        }
        setLocation(flds[1]);
        setContractor(flds[2]);
        setRigTankEq(flds[3]);
        try {
            setDiscount(Double.parseDouble(flds[4]));
        } catch(NumberFormatException ne) {
            setDiscount(null);
        }
        try {
            setTaxProc(Double.parseDouble(flds[5]));
        } catch(NumberFormatException ne) {
            setTaxProc(null);
        }
        setPoNumber(flds[6]);
        setDateIn(toDate(flds[7]));
        setSignature(flds[8]);
        setUpdatedAt(toTimeStamp(flds[9]));
        setCreatedAt(toTimeStamp(flds[10]));
        try {
            setCreatedBy(Integer.parseInt(flds[11]));
        } catch(NumberFormatException ne) {
            setCreatedBy(null);
        }
        try {
            setPoTypeId(Integer.parseInt(flds[12]));
        } catch(NumberFormatException ne) {
            setPoTypeId(null);
        }
        try {
            setContactId(Integer.parseInt(flds[13]));
        } catch(NumberFormatException ne) {
            setContactId(null);
        }
        try {
            setCustomerId(Integer.parseInt(flds[14]));
        } catch(NumberFormatException ne) {
            setCustomerId(null);
        }
        try {
            setTaxId(Integer.parseInt(flds[15]));
        } catch(NumberFormatException ne) {
            setTaxId(null);
        }
        try {
            setStampsId(Integer.parseInt(flds[16]));
        } catch(NumberFormatException ne) {
            setStampsId(null);
        }
        try {
            setSubtotal(Double.parseDouble(flds[17]));
        } catch(NumberFormatException ne) {
            setSubtotal(null);
        }
        setWellName(flds[18]);
        setAfeUww(flds[19]);
        setCai(flds[20]);
        setAprvrName(flds[21]);
        setDateStr(flds[22]);
    }
}
