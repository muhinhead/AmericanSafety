// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Dec 20 09:24:16 EET 2014
// generated file: do not modify
package com.as.orm;

import com.as.orm.dbobject.DbObject;
import com.as.orm.dbobject.ForeignKeyViolationException;
import com.as.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Document_ids extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer id = null;
    private String documentType = null;
    private Integer documentId = null;

    public Document_ids(Connection connection) {
        super(connection, "document_ids", "id");
        setColumnNames(new String[]{"id", "document_type", "document_id"});
    }

    public Document_ids(Connection connection, Integer id, String documentType, Integer documentId) {
        super(connection, "document_ids", "id");
        setNew(id.intValue() <= 0);
//        if (id.intValue() != 0) {
            this.id = id;
//        }
        this.documentType = documentType;
        this.documentId = documentId;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Document_ids document_ids = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT id,document_type,document_id FROM document_ids WHERE id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                document_ids = new Document_ids(getConnection());
                document_ids.setId(new Integer(rs.getInt(1)));
                document_ids.setDocumentType(rs.getString(2));
                document_ids.setDocumentId(new Integer(rs.getInt(3)));
                document_ids.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return document_ids;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO document_ids ("+(getId().intValue()!=0?"id,":"")+"document_type,document_id) values("+(getId().intValue()!=0?"?,":"")+"?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getId().intValue()!=0) {
                 ps.setObject(++n, getId());
             }
             ps.setObject(++n, getDocumentType());
             ps.setObject(++n, getDocumentId());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getId().intValue()==0) {
             stmt = "SELECT max(id) FROM document_ids";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE document_ids " +
                    "SET document_type = ?, document_id = ?" + 
                    " WHERE id = " + getId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getDocumentType());
                ps.setObject(2, getDocumentId());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM document_ids " +
                "WHERE id = " + getId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setId(new Integer(-getId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT id,document_type,document_id FROM document_ids " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Document_ids(con,new Integer(rs.getInt(1)),rs.getString(2),new Integer(rs.getInt(3))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Document_ids[] objects = new Document_ids[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Document_ids document_ids = (Document_ids) lst.get(i);
            objects[i] = document_ids;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT id FROM document_ids " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return id;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setId(id);
        setNew(prevIsNew);
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) throws ForeignKeyViolationException {
        setWasChanged(this.id != null && this.id != id);
        this.id = id;
        setNew(id.intValue() == 0);
    }

    public String getDocumentType() {
        return documentType;
    }

    public void setDocumentType(String documentType) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.documentType != null && !this.documentType.equals(documentType));
        this.documentType = documentType;
    }

    public Integer getDocumentId() {
        return documentId;
    }

    public void setDocumentId(Integer documentId) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.documentId != null && !this.documentId.equals(documentId));
        this.documentId = documentId;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[3];
        columnValues[0] = getId();
        columnValues[1] = getDocumentType();
        columnValues[2] = getDocumentId();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setId(null);
        }
        setDocumentType(flds[1]);
        try {
            setDocumentId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setDocumentId(null);
        }
    }
}
