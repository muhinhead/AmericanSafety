// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Thu Nov 27 11:32:33 EET 2014
// generated file: do not modify
package com.as.orm;

import com.as.orm.dbobject.DbObject;
import com.as.orm.dbobject.ForeignKeyViolationException;
import com.as.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Usersrole extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer usersroleId = null;
    private Integer userId = null;
    private Integer roleId = null;

    public Usersrole(Connection connection) {
        super(connection, "usersrole", "usersrole_id");
        setColumnNames(new String[]{"usersrole_id", "user_id", "role_id"});
    }

    public Usersrole(Connection connection, Integer usersroleId, Integer userId, Integer roleId) {
        super(connection, "usersrole", "usersrole_id");
        setNew(usersroleId.intValue() <= 0);
//        if (usersroleId.intValue() != 0) {
            this.usersroleId = usersroleId;
//        }
        this.userId = userId;
        this.roleId = roleId;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Usersrole usersrole = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT usersrole_id,user_id,role_id FROM usersrole WHERE usersrole_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                usersrole = new Usersrole(getConnection());
                usersrole.setUsersroleId(new Integer(rs.getInt(1)));
                usersrole.setUserId(new Integer(rs.getInt(2)));
                usersrole.setRoleId(new Integer(rs.getInt(3)));
                usersrole.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return usersrole;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO usersrole ("+(getUsersroleId().intValue()!=0?"usersrole_id,":"")+"user_id,role_id) values("+(getUsersroleId().intValue()!=0?"?,":"")+"?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getUsersroleId().intValue()!=0) {
                 ps.setObject(++n, getUsersroleId());
             }
             ps.setObject(++n, getUserId());
             ps.setObject(++n, getRoleId());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getUsersroleId().intValue()==0) {
             stmt = "SELECT max(usersrole_id) FROM usersrole";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setUsersroleId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE usersrole " +
                    "SET user_id = ?, role_id = ?" + 
                    " WHERE usersrole_id = " + getUsersroleId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getUserId());
                ps.setObject(2, getRoleId());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM usersrole " +
                "WHERE usersrole_id = " + getUsersroleId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setUsersroleId(new Integer(-getUsersroleId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getUsersroleId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT usersrole_id,user_id,role_id FROM usersrole " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Usersrole(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),new Integer(rs.getInt(3))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Usersrole[] objects = new Usersrole[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Usersrole usersrole = (Usersrole) lst.get(i);
            objects[i] = usersrole;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT usersrole_id FROM usersrole " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getUsersroleId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return usersroleId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setUsersroleId(id);
        setNew(prevIsNew);
    }

    public Integer getUsersroleId() {
        return usersroleId;
    }

    public void setUsersroleId(Integer usersroleId) throws ForeignKeyViolationException {
        setWasChanged(this.usersroleId != null && this.usersroleId != usersroleId);
        this.usersroleId = usersroleId;
        setNew(usersroleId.intValue() == 0);
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) throws SQLException, ForeignKeyViolationException {
        if (userId!=null && !User.exists(getConnection(),"user_id = " + userId)) {
            throw new ForeignKeyViolationException("Can't set user_id, foreign key violation: usersrole_user_fk");
        }
        setWasChanged(this.userId != null && !this.userId.equals(userId));
        this.userId = userId;
    }

    public Integer getRoleId() {
        return roleId;
    }

    public void setRoleId(Integer roleId) throws SQLException, ForeignKeyViolationException {
        if (roleId!=null && !Role.exists(getConnection(),"role_id = " + roleId)) {
            throw new ForeignKeyViolationException("Can't set role_id, foreign key violation: usersrole_role_fk");
        }
        setWasChanged(this.roleId != null && !this.roleId.equals(roleId));
        this.roleId = roleId;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[3];
        columnValues[0] = getUsersroleId();
        columnValues[1] = getUserId();
        columnValues[2] = getRoleId();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setUsersroleId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setUsersroleId(null);
        }
        try {
            setUserId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setUserId(null);
        }
        try {
            setRoleId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setRoleId(null);
        }
    }
}
