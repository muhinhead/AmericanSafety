// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Tue Oct 07 17:15:15 EEST 2014
// generated file: do not modify
package com.as.orm;

import com.as.orm.dbobject.DbObject;
import com.as.orm.dbobject.ForeignKeyViolationException;
import com.as.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Item extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer itemId = null;
    private String itemNumber = null;
    private String itemName = null;
    private String itemDescription = null;
    private Double lastPrice = null;
    private Timestamp updatedAt = null;
    private Timestamp createdAt = null;

    public Item(Connection connection) {
        super(connection, "item", "item_id");
        setColumnNames(new String[]{"item_id", "item_number", "item_name", "item_description", "last_price", "updated_at", "created_at"});
    }

    public Item(Connection connection, Integer itemId, String itemNumber, String itemName, String itemDescription, Double lastPrice, Timestamp updatedAt, Timestamp createdAt) {
        super(connection, "item", "item_id");
        setNew(itemId.intValue() <= 0);
//        if (itemId.intValue() != 0) {
            this.itemId = itemId;
//        }
        this.itemNumber = itemNumber;
        this.itemName = itemName;
        this.itemDescription = itemDescription;
        this.lastPrice = lastPrice;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Item item = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT item_id,item_number,item_name,item_description,last_price,updated_at,created_at FROM item WHERE item_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                item = new Item(getConnection());
                item.setItemId(new Integer(rs.getInt(1)));
                item.setItemNumber(rs.getString(2));
                item.setItemName(rs.getString(3));
                item.setItemDescription(rs.getString(4));
                item.setLastPrice(rs.getDouble(5));
                item.setUpdatedAt(rs.getTimestamp(6));
                item.setCreatedAt(rs.getTimestamp(7));
                item.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return item;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO item ("+(getItemId().intValue()!=0?"item_id,":"")+"item_number,item_name,item_description,last_price,updated_at,created_at) values("+(getItemId().intValue()!=0?"?,":"")+"?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getItemId().intValue()!=0) {
                 ps.setObject(++n, getItemId());
             }
             ps.setObject(++n, getItemNumber());
             ps.setObject(++n, getItemName());
             ps.setObject(++n, getItemDescription());
             ps.setObject(++n, getLastPrice());
             ps.setObject(++n, getUpdatedAt());
             ps.setObject(++n, getCreatedAt());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getItemId().intValue()==0) {
             stmt = "SELECT max(item_id) FROM item";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setItemId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE item " +
                    "SET item_number = ?, item_name = ?, item_description = ?, last_price = ?, updated_at = ?, created_at = ?" + 
                    " WHERE item_id = " + getItemId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getItemNumber());
                ps.setObject(2, getItemName());
                ps.setObject(3, getItemDescription());
                ps.setObject(4, getLastPrice());
                ps.setObject(5, getUpdatedAt());
                ps.setObject(6, getCreatedAt());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Quoteitem.exists(getConnection(),"item_id = " + getItemId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: quoteitem_item_fk");
        }
        if (Orderitem.exists(getConnection(),"item_id = " + getItemId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: orderitem_item_fk");
        }
        if (Invoiceitem.exists(getConnection(),"item_id = " + getItemId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: invoiceitem_item_fk");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM item " +
                "WHERE item_id = " + getItemId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setItemId(new Integer(-getItemId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getItemId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT item_id,item_number,item_name,item_description,last_price,updated_at,created_at FROM item " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Item(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getDouble(5),rs.getTimestamp(6),rs.getTimestamp(7)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Item[] objects = new Item[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Item item = (Item) lst.get(i);
            objects[i] = item;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT item_id FROM item " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getItemId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return itemId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setItemId(id);
        setNew(prevIsNew);
    }

    public Integer getItemId() {
        return itemId;
    }

    public void setItemId(Integer itemId) throws ForeignKeyViolationException {
        setWasChanged(this.itemId != null && this.itemId != itemId);
        this.itemId = itemId;
        setNew(itemId.intValue() == 0);
    }

    public String getItemNumber() {
        return itemNumber;
    }

    public void setItemNumber(String itemNumber) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.itemNumber != null && !this.itemNumber.equals(itemNumber));
        this.itemNumber = itemNumber;
    }

    public String getItemName() {
        return itemName;
    }

    public void setItemName(String itemName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.itemName != null && !this.itemName.equals(itemName));
        this.itemName = itemName;
    }

    public String getItemDescription() {
        return itemDescription;
    }

    public void setItemDescription(String itemDescription) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.itemDescription != null && !this.itemDescription.equals(itemDescription));
        this.itemDescription = itemDescription;
    }

    public Double getLastPrice() {
        return lastPrice;
    }

    public void setLastPrice(Double lastPrice) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.lastPrice != null && !this.lastPrice.equals(lastPrice));
        this.lastPrice = lastPrice;
    }

    public Timestamp getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(Timestamp updatedAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.updatedAt != null && !this.updatedAt.equals(updatedAt));
        this.updatedAt = updatedAt;
    }

    public Timestamp getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.createdAt != null && !this.createdAt.equals(createdAt));
        this.createdAt = createdAt;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[7];
        columnValues[0] = getItemId();
        columnValues[1] = getItemNumber();
        columnValues[2] = getItemName();
        columnValues[3] = getItemDescription();
        columnValues[4] = getLastPrice();
        columnValues[5] = getUpdatedAt();
        columnValues[6] = getCreatedAt();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setItemId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setItemId(null);
        }
        setItemNumber(flds[1]);
        setItemName(flds[2]);
        setItemDescription(flds[3]);
        try {
            setLastPrice(Double.parseDouble(flds[4]));
        } catch(NumberFormatException ne) {
            setLastPrice(null);
        }
        setUpdatedAt(toTimeStamp(flds[5]));
        setCreatedAt(toTimeStamp(flds[6]));
    }
}
